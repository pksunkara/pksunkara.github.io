<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>pksunkara - git</title>
    <subtitle>My personal blog</subtitle>
    <link rel="self" type="application/atom+xml" href="https://pksunkara.com/tags/git/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://pksunkara.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-07-03T00:00:00+01:00</updated>
    <id>https://pksunkara.com/tags/git/atom.xml</id>
    <entry xml:lang="en">
        <title>Git experts should try Jujutsu</title>
        <published>2025-07-03T00:00:00+01:00</published>
        <updated>2025-07-03T00:00:00+01:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://pksunkara.com/thoughts/git-experts-should-try-jujutsu/"/>
        <id>https://pksunkara.com/thoughts/git-experts-should-try-jujutsu/</id>
        
        <content type="html" xml:base="https://pksunkara.com/thoughts/git-experts-should-try-jujutsu/">&lt;p&gt;I&#x27;ve been a &lt;strong&gt;Git&lt;&#x2F;strong&gt; command-line power user for a long time. For me, Git isn&#x27;t just a tool for pulling and pushing code. It&#x27;s a finely-tuned instrument for crafting history. I&#x27;m the person who will meticulously clean up my commit history before submitting a pull request. My toolkit is full of commands like &lt;code&gt;git rebase -i&lt;&#x2F;code&gt;, &lt;code&gt;git add -i&lt;&#x2F;code&gt;, &lt;code&gt;git commit --fixup&lt;&#x2F;code&gt;, and &lt;code&gt;git reset --hard&lt;&#x2F;code&gt;. I can reorder, squash, and reword commits in my sleep. If something goes wrong, I know how to use the &lt;code&gt;reflog&lt;&#x2F;code&gt; to get myself out of any mess. I don&#x27;t just use Git, I speak it fluently. I even have &lt;em&gt;many many&lt;&#x2F;em&gt; custom &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;pksunkara&#x2F;988716&quot;&gt;git aliases&lt;&#x2F;a&gt; to make my workflow faster.&lt;&#x2F;p&gt;
&lt;p&gt;So when I first heard about &lt;strong&gt;Jujutsu&lt;&#x2F;strong&gt;, I was skeptical. The main selling point I saw was that it was much simpler than Git. It felt like a tool designed to shield beginners from Git&#x27;s sharp edges, not something for a seasoned expert like me.&lt;&#x2F;p&gt;
&lt;p&gt;I gave the &lt;a href=&quot;https:&#x2F;&#x2F;steveklabnik.github.io&#x2F;jujutsu-tutorial&quot;&gt;tutorial&lt;&#x2F;a&gt; a quick look, but it didn&#x27;t showcase any real benefits for my workflow. It confirmed my bias: this was for people who were afraid of Git&#x27;s power, not for those who had already mastered it.&lt;&#x2F;p&gt;
&lt;p&gt;But the idea lingered. On a whim, I decided to install it on my work machine and used it on a complex project. That&#x27;s when everything changed. I discovered that Jujutsu wasn&#x27;t about &lt;em&gt;avoiding&lt;&#x2F;em&gt; history manipulation. It was about making it faster, easier, and more intuitive than I ever thought possible. It took the concepts I had mastered in Git and gave them a superior interface.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comparison&quot;&gt;&lt;a class=&quot;permalink&quot; href=&quot;#comparison&quot;&gt;
  &lt;svg
    viewBox=&quot;0 0 16 16&quot;
    version=&quot;1.1&quot;
    width=&quot;
  
    20
  
&quot;
    height=&quot;
  
    20
  
&quot;
    aria-hidden=&quot;true&quot;
  &gt;
    &lt;path
      fill-rule=&quot;evenodd&quot;
      d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;
    &gt;&lt;&#x2F;path&gt;
  &lt;&#x2F;svg&gt;
&lt;&#x2F;a&gt;
Comparison&lt;&#x2F;h2&gt;
&lt;p&gt;Here are a few examples of how Jujutsu streamlined tasks that were already second nature to me in Git.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;editing-an-old-commit&quot;&gt;&lt;a class=&quot;permalink&quot; href=&quot;#editing-an-old-commit&quot;&gt;
  &lt;svg
    viewBox=&quot;0 0 16 16&quot;
    version=&quot;1.1&quot;
    width=&quot;
  
    18
  
&quot;
    height=&quot;
  
    18
  
&quot;
    aria-hidden=&quot;true&quot;
  &gt;
    &lt;path
      fill-rule=&quot;evenodd&quot;
      d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;
    &gt;&lt;&#x2F;path&gt;
  &lt;&#x2F;svg&gt;
&lt;&#x2F;a&gt;
Editing an old commit&lt;&#x2F;h3&gt;
&lt;p&gt;This is a classic scenario. You&#x27;ve spotted a typo or a small bug in a commit from five changes ago.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;In Git:&lt;&#x2F;strong&gt;
You start an interactive rebase, find the commit, mark it for editing, make your changes, amend the commit, and finally, continue the rebase.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Start the interactive rebase
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; HEAD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# And mark the commit you want to edit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Make your code changes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; lib&#x2F;edit.ts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Amend the commit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; add .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --amend
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Finish the rebase
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --continue
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;In Jujutsu:&lt;&#x2F;strong&gt;
You simply tell it which change you want to edit. It checks it out, you make your changes, and you&#x27;re done. Jujutsu handles the rebase automatically in the background.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Edit the change directly
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;jj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; edit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;change-id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Make your code changes...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; lib&#x2F;edit.ts
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s no interactive editor, no &lt;code&gt;--continue&lt;&#x2F;code&gt; step. It&#x27;s direct and to the point.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;splitting-a-commit&quot;&gt;&lt;a class=&quot;permalink&quot; href=&quot;#splitting-a-commit&quot;&gt;
  &lt;svg
    viewBox=&quot;0 0 16 16&quot;
    version=&quot;1.1&quot;
    width=&quot;
  
    18
  
&quot;
    height=&quot;
  
    18
  
&quot;
    aria-hidden=&quot;true&quot;
  &gt;
    &lt;path
      fill-rule=&quot;evenodd&quot;
      d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;
    &gt;&lt;&#x2F;path&gt;
  &lt;&#x2F;svg&gt;
&lt;&#x2F;a&gt;
Splitting a commit&lt;&#x2F;h3&gt;
&lt;p&gt;You&#x27;ve just realized you bundled two unrelated changes into a single commit.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;In Git:&lt;&#x2F;strong&gt;
This requires another interactive rebase, mark it for editing, reset it to unstage the changes, and then carefully using &lt;code&gt;git add -p&lt;&#x2F;code&gt; to rebuild the commits piece by piece.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Start the interactive rebase
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# And mark the commit you want to edit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Reset the commit but keep the changes in the working directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;git reset HEAD^
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Interactively add the first set of changes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -p
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;First part&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Add the remaining changes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; add .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Second part&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Finish the rebase
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; rebase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --continue
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;In Jujutsu:&lt;&#x2F;strong&gt;
A single command initiates an interactive diff editor, allowing you to decide what to keep in the original commit and what to move to a new one.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;jj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; split &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;change-id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# This creates two new commits. You can then use `jj describe` to edit the commit messages.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is far more intuitive and significantly faster.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;creating-a-quick-pr&quot;&gt;&lt;a class=&quot;permalink&quot; href=&quot;#creating-a-quick-pr&quot;&gt;
  &lt;svg
    viewBox=&quot;0 0 16 16&quot;
    version=&quot;1.1&quot;
    width=&quot;
  
    18
  
&quot;
    height=&quot;
  
    18
  
&quot;
    aria-hidden=&quot;true&quot;
  &gt;
    &lt;path
      fill-rule=&quot;evenodd&quot;
      d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;
    &gt;&lt;&#x2F;path&gt;
  &lt;&#x2F;svg&gt;
&lt;&#x2F;a&gt;
Creating a quick PR&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;In Git:&lt;&#x2F;strong&gt;
The standard procedure is to create a branch, commit your changes, push that branch, and then open a pull request on your hosting platform.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Create a new branch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; my-feature-branch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Make your changes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; lib&#x2F;edit.ts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Stage and commit your changes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; add .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;My feature&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Push the branch to the remote
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push origin my-feature-branch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Create a pull request
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;gh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; pr create
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;In Jujutsu:&lt;&#x2F;strong&gt;
You can push your current change directly to the remote, which Jujutsu will place on a new branch for you. No need to manage local branches.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Start a new change
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;jj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;My feature&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Make your changes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; lib&#x2F;edit.ts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Push the change to the remote
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;jj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; git push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --change&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; @
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;# Create a pull request
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82728;&quot;&gt;gh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; pr create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt; --head &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;created-bookmark-name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;permalink&quot; href=&quot;#conclusion&quot;&gt;
  &lt;svg
    viewBox=&quot;0 0 16 16&quot;
    version=&quot;1.1&quot;
    width=&quot;
  
    20
  
&quot;
    height=&quot;
  
    20
  
&quot;
    aria-hidden=&quot;true&quot;
  &gt;
    &lt;path
      fill-rule=&quot;evenodd&quot;
      d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;
    &gt;&lt;&#x2F;path&gt;
  &lt;&#x2F;svg&gt;
&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;After years of honing my Git skills, I thought I had reached peak efficiency. Jujutsu proved me wrong. It&#x27;s not a replacement for understanding how version control works. It&#x27;s a force multiplier for those who already do. Jujutsu automates the tedious mechanics of history editing, letting you focus on the &lt;em&gt;what&lt;&#x2F;em&gt; instead of the &lt;em&gt;how&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re a Git expert who prides yourself on your ability to manipulate history, I urge you to give Jujutsu a serious try on a real project. You might just find that your favorite power tools have been upgraded.&lt;&#x2F;p&gt;
&lt;p&gt;And yes, I&#x27;ve already started a new list of &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;pksunkara&#x2F;622bc04242d402c4e43c7328234fd01c&quot;&gt;jj aliases&lt;&#x2F;a&gt; to make my workflow even faster.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
