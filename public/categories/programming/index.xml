<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on pksunkara</title>
    <link>http://pksunkara.com/categories/programming/</link>
    <description>Recent content in programming on pksunkara</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Jan 2017 03:23:55 +0530</lastBuildDate>
    
	<atom:link href="http://pksunkara.com/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Complex Vue.js App Structure</title>
      <link>http://pksunkara.com/posts/complex-vuejs-app-structure/</link>
      <pubDate>Wed, 25 Jan 2017 03:23:55 +0530</pubDate>
      
      <guid>http://pksunkara.com/posts/complex-vuejs-app-structure/</guid>
      <description>I have always liked it whenever a framework provides it&amp;rsquo;s own generators and/or boilerplates. It&amp;rsquo;s what I liked about Ruby on Rails the most after the MVC concept. Developers can understand a lot about the framework and the way it&amp;rsquo;s intended to be used from the official boilerplates. I am sad that the recent javascript frameworks has left this important job of generating code to the community and tools like yeoman instead of having something official.</description>
    </item>
    
    <item>
      <title>Cloudant: CouchDB as Backend</title>
      <link>http://pksunkara.com/posts/cloudant-couchdb-as-backend/</link>
      <pubDate>Sat, 01 Oct 2016 15:25:32 +0200</pubDate>
      
      <guid>http://pksunkara.com/posts/cloudant-couchdb-as-backend/</guid>
      <description>There have been a lot of guides on how to use CouchDB as a database for the web while restricting users to write only the data they own. I have been recently experimenting with how to use Cloudant&amp;rsquo;s CouchDB as a backend directly for one of my Single Page Applications [SPA]. This blog post gives a little perspective on the limitations of the idea and how to achieve it.</description>
    </item>
    
    <item>
      <title>Gomu: Configuration Management</title>
      <link>http://pksunkara.com/posts/gomu-configuration-management/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://pksunkara.com/posts/gomu-configuration-management/</guid>
      <description>Every web application requires configuration management. Providing a configuration manager is one of important tasks of any web framework.
Rails does it by asking the user to edit yaml files and a few ruby files. Some node.js frameworks achieve this by using JSON files. In this post, I will present an idea on how the configuration management system should ideally work.
Two years ago, during this time Heroku published a website detailing a concept called The Twelve-Factor App.</description>
    </item>
    
    <item>
      <title>Gomu: Introduction</title>
      <link>http://pksunkara.com/posts/gomu-introduction/</link>
      <pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://pksunkara.com/posts/gomu-introduction/</guid>
      <description>I have recently started tinkering with the Go programming language and I am impressed by its potential.
Go is better than some of the major programming languages at many tasks like concurrency, run time, memory, etc. In my opinion, its ease of deployment ranks high on that list. Everything gets compiled into a single binary and it&amp;rsquo;s just a matter of uploading it.
I have used Go for my recent project Alpaca which given a web api, generates client libraries in ruby, python, node and php.</description>
    </item>
    
  </channel>
</rss>